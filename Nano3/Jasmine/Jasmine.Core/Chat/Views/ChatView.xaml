<UserControl x:Class="Jasmine.Core.Chat.Views.ChatView"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
			 xmlns:prism="http://prismlibrary.com/"
			 xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
			 xmlns:behaviors="clr-namespace:Jasmine.Core.Behaviors"
			 xmlns:local="clr-namespace:Jasmine.Core.Chat.Views"
			 xmlns:enum="clr-namespace:Jasmine.Core.Chat"
			 xmlns:helpers="clr-namespace:Jasmine.Core.Helpers"
			 xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
			 xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
			 xmlns:emojiwpf="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"
			 xmlns:emoji="clr-namespace:Jasmine.Core.Controls.Emoji"
			 prism:ViewModelLocator.AutoWireViewModel="True"
			 mc:Ignorable="d" 
			 d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True, Type={x:Type local:SampleChatViewModel}}"
			 d:DesignHeight="450" d:DesignWidth="800"
			 >
	<dxmvvm:Interaction.Behaviors>
		<dx:DXMessageBoxService />
		<dxmvvm:DispatcherService/>
	</dxmvvm:Interaction.Behaviors>
	<UserControl.Resources>
		<Style x:Key="SendButtonStyle" TargetType="{x:Type Button}">
			<Setter Property="Background" Value="Transparent"/>
			<Setter Property="BorderBrush" Value="Transparent"/>
			<!--<Setter Property="Foreground" Value="{DynamicResource PrimaryHueDarkBrush}"/>-->
			<Setter Property="Cursor" Value="Hand"/>
			<Setter Property="FontWeight" Value="Medium"/>
			<Setter Property="FontSize" Value="14"/>
			<Setter Property="BorderThickness" Value="1"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="VerticalContentAlignment" Value="Stretch"/>
			<Setter Property="Padding" Value="0"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid Background="#00000000">
							<Button Name="SendIcon" Content="Send" SnapsToDevicePixels="True"
													 Foreground="{TemplateBinding Foreground}"
													 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													 Margin="{TemplateBinding Padding}" Width="Auto" Height="Auto"/>
						</Grid>
						<!--<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Foreground" TargetName="SendIcon" Value="{DynamicResource PrimaryHueMidBrush}"/>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="True">
								<Setter Property="Foreground" TargetName="SendIcon" Value="{DynamicResource PrimaryHueMidBrush}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Opacity" Value="0.23"/>
							</Trigger>
						</ControlTemplate.Triggers>-->
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="ImageButtonStyle" TargetType="Button" BasedOn="{StaticResource SendButtonStyle}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Grid Background="#00000000">
							<Button Name="PhotoIcon" Content="Image" SnapsToDevicePixels="True"
													 Foreground="{TemplateBinding Foreground}"
													 HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
													 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
													 Margin="{TemplateBinding Padding}" Width="Auto" Height="Auto"/>
						</Grid>
						<!--<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Foreground" TargetName="PhotoIcon" Value="{DynamicResource PrimaryHueMidBrush}"/>
							</Trigger>
							<Trigger Property="IsKeyboardFocused" Value="True">
								<Setter Property="Foreground" TargetName="PhotoIcon" Value="{DynamicResource PrimaryHueMidBrush}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Opacity" Value="0.23"/>
							</Trigger>
						</ControlTemplate.Triggers>-->
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<DataTemplate x:Key="MessagesDataTemplate">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Path Grid.Column="0" Name="MessageLeftAnchor" Visibility="Hidden"
								  Stroke="Black" Margin="10,0,0,0"                 
								  Data="M 13,5 L 0,5 L 10,15" 
								  StrokeThickness="0"
								  Fill="{Binding HoverBackground, Source={x:Static helpers:ColorHelper.Instance}}" />
				<Border Grid.Column="1" Name="MessageBorder" MinWidth="50" MaxWidth="500" BorderThickness="0" ToolTip="{Binding Time}"
						Background="{Binding HoverBackground, Source={x:Static helpers:ColorHelper.Instance}}" 
						Margin="-3,2,0,0" CornerRadius="4" SnapsToDevicePixels="True"
						HorizontalAlignment="Left">
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<emoji:TextBlock x:Name="MessageTxtBlock" TextWrapping="Wrap" Margin="5 3 3 0" EmojiFontSize="24"
								   Foreground="{Binding HoverForeground, Source={x:Static helpers:ColorHelper.Instance}}"
								   Text="{Binding Message}"/>
						<StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Right">
							<TextBlock Margin="3 0 2 3" x:Name="MessageTimeBlock"
									   HorizontalAlignment="Right" VerticalAlignment="Bottom" 
									   Foreground="{Binding HoverForeground, Source={x:Static helpers:ColorHelper.Instance}}"
									   FontSize="10" Opacity="0.8" 
									   Text="{Binding Time, StringFormat={}{0:HH:mm}}"/>
							<ContentControl Margin="3 0 3 3" x:Name="MessageStatusBlock" Visibility="Hidden"
								HorizontalAlignment="Right" VerticalAlignment="Bottom">
								<Grid Width="14">
									<Path x:Name="MessageStatusReceived"
									  Stroke="{Binding SelectionForeground, Source={x:Static helpers:ColorHelper.Instance}}"                  
								  Data="M 0,5 L 3,8 L 10,0" Visibility="Hidden"
								  StrokeThickness="1"/>
									<Path x:Name="MessageStatusDelivered" Stroke="{Binding SelectionForeground, Source={x:Static helpers:ColorHelper.Instance}}"                  
								  Data="M 0,5 L 3,8 L 10,0 M 6,7 L 7,8 L 14,0" Visibility="Hidden"
								  StrokeThickness="1"/>
									<Path x:Name="MessageStatusReadMessage" Stroke="{Binding SelectionContrastForeground, Source={x:Static helpers:ColorHelper.Instance}}"                  
								  Data="M 0,5 L 3,8 L 10,0 M 6,7 L 7,8 L 14,0" Visibility="Hidden"
								  StrokeThickness="1"/>
								</Grid>
							</ContentControl>
						</StackPanel>
					</Grid>
				</Border>
				<Line Grid.Column="1" Name="NewMessageLine" Stretch="Fill" 
					  Stroke="{Binding SelectionBackground, Source={x:Static helpers:ColorHelper.Instance}}" X2="1" Visibility="Hidden"/>
				<TextBlock Grid.Column="1" Name="NewMessage" Text="{Binding Message}" Padding="5 0 5 0" Margin="0 5 0 5"
						   Visibility="Hidden" HorizontalAlignment="Center"
						   Background="{Binding Background, Source={x:Static helpers:ColorHelper.Instance}}"/>

				<!--<dx:SimpleButton Grid.Column="1" Foreground="{Binding HoverForeground, Source={x:Static helpers:ColorHelper.Instance}}"
									 Background="{Binding Border, Source={x:Static helpers:ColorHelper.Instance}}" 
									 x:Name="DateMessage" Content="{Binding Message}" Glyph="{Binding Glyph}" Padding="5"
										 Command="{Binding DataContext.LoadMoreCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}"/>-->
				<Button Grid.Column="1" x:Name="DateMessage" Visibility="Collapsed" Cursor="Hand"
						Command="{Binding DataContext.LoadMoreCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}">
					<Button.Template>
						<ControlTemplate>
							<Border BorderThickness="0" Margin="5"
							Background="{Binding Border, Source={x:Static helpers:ColorHelper.Instance}}" 
							CornerRadius="4" SnapsToDevicePixels="True"
							HorizontalAlignment="Center">
								<StackPanel Orientation="Horizontal">
									<TextBlock Margin="10 5 5 5" Text="{Binding Message}" Foreground="{Binding HoverForeground, Source={x:Static helpers:ColorHelper.Instance}}"/>
									<Image Source="{Binding Glyph}" Margin="0 5 5 5"/>
								</StackPanel>
							</Border>
						</ControlTemplate>
					</Button.Template>
				</Button>
				<Path Grid.Column="2" Name="MessageRightAnchor"
								  Stroke="Black" Margin="-10,0,10,0"                   
								  Data="M -3,5 L 10,5 L 0,15" 
								  StrokeThickness="0"
								  Fill="{Binding SelectionBackground, Source={x:Static helpers:ColorHelper.Instance}}">
					<Path.Style>
						<Style TargetType="Path">
							<Style.Setters>
								<Setter Property="Visibility" Value="Hidden"/>
							</Style.Setters>
						</Style>
					</Path.Style>
				</Path>
			</Grid>
			<DataTemplate.Triggers>
				<DataTrigger Binding="{Binding Author}" Value="System">
					<Setter TargetName="MessageLeftAnchor" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageBorder" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageRightAnchor" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="NewMessage" Property="Visibility" Value="Visible"/>
					<Setter TargetName="NewMessageLine" Property="Visibility" Value="Visible"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding Author}" Value="Date">
					<Setter TargetName="MessageLeftAnchor" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageBorder" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageRightAnchor" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="DateMessage" Property="Visibility" Value="Visible"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding IsOriginNative}" Value="True">
					<Setter TargetName="MessageBorder" Property="HorizontalAlignment" Value="Right"/>
					<Setter TargetName="MessageBorder" Property="Margin" Value="60,2,10,0"/>
					<Setter TargetName="MessageBorder" Property="Background" Value="{Binding SelectionBackground, Source={x:Static helpers:ColorHelper.Instance}}"/>
					<Setter TargetName="MessageTxtBlock" Property="Foreground" Value="{Binding SelectionForeground, Source={x:Static helpers:ColorHelper.Instance}}"/>
					<Setter TargetName="MessageTimeBlock" Property="Foreground" Value="{Binding SelectionForeground, Source={x:Static helpers:ColorHelper.Instance}}"/>
					<Setter TargetName="MessageStatusBlock" Property="Visibility" Value="Visible"/>
				</DataTrigger>
				<!--<DataTrigger Binding="{Binding Picture}" Value="{x:Null}">
					<Setter TargetName="ImageMessageGrid" Property="Visibility" Value="Collapsed"/>
				</DataTrigger>-->
				<DataTrigger Binding="{Binding NotificationType}">
					<DataTrigger.Value>
						<enum:NotificationType>Received</enum:NotificationType>
					</DataTrigger.Value>
					<Setter TargetName="MessageStatusReceived" Property="Visibility" Value="Visible"/>
					<Setter TargetName="MessageStatusDelivered" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageStatusReadMessage" Property="Visibility" Value="Collapsed"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding NotificationType}">
					<DataTrigger.Value>
						<enum:NotificationType>Delivered</enum:NotificationType>
					</DataTrigger.Value>
					<Setter TargetName="MessageStatusReceived" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageStatusDelivered" Property="Visibility" Value="Visible"/>
					<Setter TargetName="MessageStatusReadMessage" Property="Visibility" Value="Collapsed"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding NotificationType}">
					<DataTrigger.Value>
						<enum:NotificationType>ReadMessage</enum:NotificationType>
					</DataTrigger.Value>
					<Setter TargetName="MessageStatusReceived" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageStatusDelivered" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageStatusReadMessage" Property="Visibility" Value="Visible"/>
				</DataTrigger>
				<DataTrigger Binding="{Binding Message}" Value="{x:Null}">
					<Setter TargetName="MessageTxtBlock" Property="Visibility" Value="Collapsed"/>
					<Setter TargetName="MessageBorder" Property="MaxWidth" Value="320"/>
				</DataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding HasAnchor}" Value="True"/>
						<Condition Binding="{Binding IsOriginNative}" Value="True"/>
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter TargetName="MessageRightAnchor" Property="Visibility" Value="Visible"/>
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding HasAnchor}" Value="True"/>
						<Condition Binding="{Binding IsOriginNative}" Value="False"/>
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<Setter TargetName="MessageLeftAnchor" Property="Visibility" Value="Visible"/>
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
				<MultiDataTrigger>
					<MultiDataTrigger.Conditions>
						<Condition Binding="{Binding Message}" Value="{x:Null}"/>
						<Condition Binding="{Binding IsOriginNative}" Value="True"/>
					</MultiDataTrigger.Conditions>
					<MultiDataTrigger.Setters>
						<!--<Setter TargetName="MessageBorder" Property="Margin" Value="0,0,10,10"/>-->
						<Setter TargetName="MessageBorder" Property="HorizontalAlignment" Value="Right"/>
					</MultiDataTrigger.Setters>
				</MultiDataTrigger>
			</DataTemplate.Triggers>
		</DataTemplate>
	</UserControl.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition />
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<ItemsControl x:Name="MessagesItemsCtrl" Grid.Column="0" 
					  ItemsSource="{Binding ChatMessages}" ItemTemplate="{DynamicResource MessagesDataTemplate}"
					  ScrollViewer.VerticalScrollBarVisibility="Auto">

			<dxmvvm:Interaction.Behaviors>
				<behaviors:BringNewItemIntoViewBehavior/>
			</dxmvvm:Interaction.Behaviors>
			<ItemsControl.Template>
				<ControlTemplate TargetType="ItemsControl">
					<ScrollViewer>
						<ItemsPresenter/>
					</ScrollViewer>
				</ControlTemplate>
			</ItemsControl.Template>
		</ItemsControl>
		<Border Grid.Row="1" Margin="0 2 0 0" Grid.Column="1" SnapsToDevicePixels="True" Height="40" BorderThickness="1" Background="Transparent"
				BorderBrush="{Binding SelectionBorder, Source={x:Static helpers:ColorHelper.Instance}}">
			<!--Message-->
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<!--Smily-->
				<!--<Button Grid.Column="0" VerticalAlignment="Center" VerticalContentAlignment="Center"
															BorderBrush="Transparent" Background="Transparent" 
															Margin="10,0,5,0" Cursor="Hand"
															Command="{Binding SmilyMessageCommand}">
					<Button.Template>
						<ControlTemplate>
							<Image VerticalAlignment="Center" 
															Height="24" Width="24"
															Source="{dx:SvgImageSource Uri=../Images/happy.svg}"/>
						</ControlTemplate>
					</Button.Template>
				</Button>-->
				<emojiwpf:Picker Grid.Column="0" FontSize="24" Background="Transparent" x:Name="Emoji" SelectionChanged="Picker_SelectionChanged"/>
				<!--Text-->
				<dxe:TextEdit Grid.Column="1" x:Name="MessageTxtBox" BorderBrush="Transparent"
						TextWrapping="Wrap" ShowNullTextForEmptyValue="True" NullText="Write a Message"
						VerticalScrollBarVisibility="Hidden" BorderThickness="0" ShowBorder="False"
							  Text="{Binding TextMessage, UpdateSourceTrigger=PropertyChanged}">
					<dxmvvm:Interaction.Behaviors>
						<dxmvvm:EventToCommand EventName="KeyUp" Command="{Binding TypingCommand, Delay=300}"/>
					</dxmvvm:Interaction.Behaviors>
					<dxe:TextEdit.InputBindings>
						<KeyBinding Key="Enter" Command="{Binding SendMessageCommand}"/>
					</dxe:TextEdit.InputBindings>
				</dxe:TextEdit>
				<!--Image-->
				<Button Grid.Column="2" VerticalAlignment="Center" VerticalContentAlignment="Center"
															BorderBrush="Transparent" Background="Transparent" 
															Margin="10,0,5,0" Cursor="Hand"
															Command="{Binding ImageMessageCommand}">
					<Button.Template>
						<ControlTemplate>
							<Image VerticalAlignment="Center" 
															Height="24" Width="24"
															Source="{dx:DXImage Image=Image_32x32.png}"/>
						</ControlTemplate>
					</Button.Template>
				</Button>
			</Grid>
		</Border>
		<TextBlock Grid.Row="2" Padding="5" Background="{Binding SelectionBorder, Source={x:Static helpers:ColorHelper.Instance}}" 
                   VerticalAlignment="Bottom" Text="{Binding ParticipantTypingText}"/>
	</Grid>
</UserControl>
