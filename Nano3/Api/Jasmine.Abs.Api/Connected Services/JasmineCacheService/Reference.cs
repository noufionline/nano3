//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JasmineCacheService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizedItem", Namespace="http://schemas.datacontract.org/2004/07/NetSqlAzMan.Cache")]
    public partial class AuthorizedItem : object
    {
        
        private System.Collections.Generic.KeyValuePair<string, string>[] AttributesField;
        
        private JasmineCacheService.AuthorizationType AuthorizationField;
        
        private string NameField;
        
        private JasmineCacheService.ItemType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.KeyValuePair<string, string>[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JasmineCacheService.AuthorizationType Authorization
        {
            get
            {
                return this.AuthorizationField;
            }
            set
            {
                this.AuthorizationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public JasmineCacheService.ItemType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizationType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum AuthorizationType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Neutral = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Allow = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deny = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AllowWithDelegation = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemType", Namespace="http://NetSqlAzMan/ServiceModel")]
    public enum ItemType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Role = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Task = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Operation = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JasmineCacheService.ICacheService")]
    public interface ICacheService
    {
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithAttributesRetrieve" +
            "Response")]
        System.Threading.Tasks.Task<JasmineCacheService.CheckAccessForWindowsUsersWithAttributesRetrieveResponse> CheckAccessForWindowsUsersWithAttributesRetrieveAsync(JasmineCacheService.CheckAccessForWindowsUsersWithAttributesRetrieveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForWindowsUsersWithoutAttributesRetri" +
            "eveResponse")]
        System.Threading.Tasks.Task<JasmineCacheService.AuthorizationType> CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "e", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithAttributesRetriev" +
            "eResponse")]
        System.Threading.Tasks.Task<JasmineCacheService.CheckAccessForDatabaseUsersWithAttributesRetrieveResponse> CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(JasmineCacheService.CheckAccessForDatabaseUsersWithAttributesRetrieveRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieve", ReplyAction="http://tempuri.org/ICacheService/CheckAccessForDatabaseUsersWithoutAttributesRetr" +
            "ieveResponse")]
        System.Threading.Tasks.Task<JasmineCacheService.AuthorizationType> CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/InvalidateCache", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheResponse")]
        System.Threading.Tasks.Task InvalidateCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartners", ReplyAction="http://tempuri.org/ICacheService/InvalidateCacheOnServicePartnersResponse")]
        System.Threading.Tasks.Task InvalidateCacheOnServicePartnersAsync(bool invalidateCacheOnServicePartners);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetItemNames", ReplyAction="http://tempuri.org/ICacheService/GetItemNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetItemNamesAsync(string storeName, string applicationName, JasmineCacheService.ItemType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAllItems", ReplyAction="http://tempuri.org/ICacheService/GetAllItemsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, JasmineCacheService.ItemType>[]> GetAllItemsAsync(string storeName, string applicationName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForDatabaseUsersResponse")]
        System.Threading.Tasks.Task<JasmineCacheService.AuthorizedItem[]> GetAuthorizedItemsForDatabaseUsersAsync(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsers", ReplyAction="http://tempuri.org/ICacheService/GetAuthorizedItemsForWindowsUsersResponse")]
        System.Threading.Tasks.Task<JasmineCacheService.AuthorizedItem[]> GetAuthorizedItemsForWindowsUsersAsync(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckAccessForWindowsUsersWithAttributesRetrieve", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckAccessForWindowsUsersWithAttributesRetrieveRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string storeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string applicationName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string itemName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string userSSid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string[] groupsSSid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public System.DateTime validFor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public bool operationsOnly;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public System.Collections.Generic.KeyValuePair<string, object>[] contextParameters;
        
        public CheckAccessForWindowsUsersWithAttributesRetrieveRequest()
        {
        }
        
        public CheckAccessForWindowsUsersWithAttributesRetrieveRequest(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            this.storeName = storeName;
            this.applicationName = applicationName;
            this.itemName = itemName;
            this.userSSid = userSSid;
            this.groupsSSid = groupsSSid;
            this.validFor = validFor;
            this.operationsOnly = operationsOnly;
            this.contextParameters = contextParameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckAccessForWindowsUsersWithAttributesRetrieveResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckAccessForWindowsUsersWithAttributesRetrieveResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public JasmineCacheService.AuthorizationType CheckAccessForWindowsUsersWithAttributesRetrieveResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.KeyValuePair<string, string>[] attributes;
        
        public CheckAccessForWindowsUsersWithAttributesRetrieveResponse()
        {
        }
        
        public CheckAccessForWindowsUsersWithAttributesRetrieveResponse(JasmineCacheService.AuthorizationType CheckAccessForWindowsUsersWithAttributesRetrieveResult, System.Collections.Generic.KeyValuePair<string, string>[] attributes)
        {
            this.CheckAccessForWindowsUsersWithAttributesRetrieveResult = CheckAccessForWindowsUsersWithAttributesRetrieveResult;
            this.attributes = attributes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckAccessForDatabaseUsersWithAttributesRetrieve", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckAccessForDatabaseUsersWithAttributesRetrieveRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string storeName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string applicationName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string itemName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string DBuserSSid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public System.DateTime validFor;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public bool operationsOnly;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public System.Collections.Generic.KeyValuePair<string, object>[] contextParameters;
        
        public CheckAccessForDatabaseUsersWithAttributesRetrieveRequest()
        {
        }
        
        public CheckAccessForDatabaseUsersWithAttributesRetrieveRequest(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            this.storeName = storeName;
            this.applicationName = applicationName;
            this.itemName = itemName;
            this.DBuserSSid = DBuserSSid;
            this.validFor = validFor;
            this.operationsOnly = operationsOnly;
            this.contextParameters = contextParameters;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckAccessForDatabaseUsersWithAttributesRetrieveResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class CheckAccessForDatabaseUsersWithAttributesRetrieveResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public JasmineCacheService.AuthorizationType CheckAccessForDatabaseUsersWithAttributesRetrieveResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.KeyValuePair<string, string>[] attributes;
        
        public CheckAccessForDatabaseUsersWithAttributesRetrieveResponse()
        {
        }
        
        public CheckAccessForDatabaseUsersWithAttributesRetrieveResponse(JasmineCacheService.AuthorizationType CheckAccessForDatabaseUsersWithAttributesRetrieveResult, System.Collections.Generic.KeyValuePair<string, string>[] attributes)
        {
            this.CheckAccessForDatabaseUsersWithAttributesRetrieveResult = CheckAccessForDatabaseUsersWithAttributesRetrieveResult;
            this.attributes = attributes;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public interface ICacheServiceChannel : JasmineCacheService.ICacheService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.1")]
    public partial class CacheServiceClient : System.ServiceModel.ClientBase<JasmineCacheService.ICacheService>, JasmineCacheService.ICacheService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CacheServiceClient() : 
                base(CacheServiceClient.GetDefaultBinding(), CacheServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_ICacheService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CacheServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CacheServiceClient.GetBindingForEndpoint(endpointConfiguration), CacheServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CacheServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CacheServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CacheServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CacheServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CacheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.CheckAccessForWindowsUsersWithAttributesRetrieveResponse> CheckAccessForWindowsUsersWithAttributesRetrieveAsync(JasmineCacheService.CheckAccessForWindowsUsersWithAttributesRetrieveRequest request)
        {
            return base.Channel.CheckAccessForWindowsUsersWithAttributesRetrieveAsync(request);
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.AuthorizationType> CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string userSSid, string[] groupsSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            return base.Channel.CheckAccessForWindowsUsersWithoutAttributesRetrieveAsync(storeName, applicationName, itemName, userSSid, groupsSSid, validFor, operationsOnly, contextParameters);
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.CheckAccessForDatabaseUsersWithAttributesRetrieveResponse> CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(JasmineCacheService.CheckAccessForDatabaseUsersWithAttributesRetrieveRequest request)
        {
            return base.Channel.CheckAccessForDatabaseUsersWithAttributesRetrieveAsync(request);
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.AuthorizationType> CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(string storeName, string applicationName, string itemName, string DBuserSSid, System.DateTime validFor, bool operationsOnly, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            return base.Channel.CheckAccessForDatabaseUsersWithoutAttributesRetrieveAsync(storeName, applicationName, itemName, DBuserSSid, validFor, operationsOnly, contextParameters);
        }
        
        public System.Threading.Tasks.Task InvalidateCacheAsync()
        {
            return base.Channel.InvalidateCacheAsync();
        }
        
        public System.Threading.Tasks.Task InvalidateCacheOnServicePartnersAsync(bool invalidateCacheOnServicePartners)
        {
            return base.Channel.InvalidateCacheOnServicePartnersAsync(invalidateCacheOnServicePartners);
        }
        
        public System.Threading.Tasks.Task<string[]> GetItemNamesAsync(string storeName, string applicationName, JasmineCacheService.ItemType type)
        {
            return base.Channel.GetItemNamesAsync(storeName, applicationName, type);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.KeyValuePair<string, JasmineCacheService.ItemType>[]> GetAllItemsAsync(string storeName, string applicationName)
        {
            return base.Channel.GetAllItemsAsync(storeName, applicationName);
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.AuthorizedItem[]> GetAuthorizedItemsForDatabaseUsersAsync(string storeName, string applicationName, string DBuserSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            return base.Channel.GetAuthorizedItemsForDatabaseUsersAsync(storeName, applicationName, DBuserSSid, validFor, contextParameters);
        }
        
        public System.Threading.Tasks.Task<JasmineCacheService.AuthorizedItem[]> GetAuthorizedItemsForWindowsUsersAsync(string storeName, string applicationName, string userSSid, string[] groupsSSid, System.DateTime validFor, System.Collections.Generic.KeyValuePair<string, object>[] contextParameters)
        {
            return base.Channel.GetAuthorizedItemsForWindowsUsersAsync(storeName, applicationName, userSSid, groupsSSid, validFor, contextParameters);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICacheService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ICacheService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://webserver:8000/NetSqlAzMan.Cache.Service/CacheService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CacheServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_ICacheService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CacheServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_ICacheService);
        }
        
        public enum EndpointConfiguration
        {
            
            NetTcpBinding_ICacheService,
        }
    }
}
